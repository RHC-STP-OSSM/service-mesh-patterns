---
# taken from https://discuss.istio.io/t/using-authorizationpolicy-for-access-control-of-legacy-clients-located-outside-of-istio/11552/3
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: subject-peer-certificate-header
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: custom-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inline_code: |
              function envoy_on_request(request)
                local conn = request:streamInfo():downstreamSslConnection()
                request:headers():replace("x-forwarded-client-cert-subject-dn", conn:subjectPeerCertificate())
                -- Subject Altenative Names not used in AuthorizationPolicy example, but could also be matched upon
                request:headers():replace("x-forwarded-client-cert-sans", table.concat(conn:dnsSansPeerCertificate(), ","))                
              end
...
